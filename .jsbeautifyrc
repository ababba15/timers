{
    "plugins": [
        "esformatter-jsx"
    ],
    // this is the section this plugin will use to store the settings for the jsx formatting
    "jsx": {
        // whether to recursively format jsx expressions with esformatter
        // set this to false if you don't want JSXExpressions to be formatted recursively, like when using problematic plugins
        "formatJSXExpressions": true,
        // By default ObjectExpression and ArrayExpression in JSXExpressions are inlined,
        // if false, the Expression might expand several lines
        "JSXExpressionsSingleLine": true,
        // by default is true if set to false it works the same as esformatter-jsx-ignore
        "formatJSX": true,
        // keep the node attributes on the same line as the open tag. Default is true.
        // Setting this to false will put each one of the attributes on a single line
        "attrsOnSameLineAsTag": true,
        // how many attributes should the node have before having to put each
        // attribute in a new line. Default 1
        "maxAttrsOnTag": 1,
        // if the attributes are going to be put each one on its own line, then keep the first
        // on the same line as the open tag
        "firstAttributeOnSameLine": false,
        // default to one space. Make it empty if you don't like spaces between JSXExpressionContainers
        "spaceInJSXExpressionContainers": " ",
        // align the attributes with the first attribute (if the first attribute was kept on the same line as on the open tag)
        "alignWithFirstAttribute": true,
        "htmlOptions": { // same as the ones passed to js-beautifier.html
            "brace_style": "collapse",
            "indent_char": " ",
            "indent_size": 4,
            "max_preserve_newlines": 2,
            "preserve_newlines": true
            //wrap_line_length: 250
        }
    }
}
// {
//   "alert-errors": true,
//   "autoformat": true,
//   "extensions": [
//     "js",
//     "jsx"
//   ],
//   "ignore-selection": true,
//   "node-path": "node",
//   "options": {
//     "plugins": [
//       "esformatter-jsx",
//       "esformatter-quotes",
//       "esformatter-dot-notation"
//     ],
//     "indent": {
//       "AlignComments": false,
//       "value": "    "
//     },
//     "jsx": {
//       "JSXAttributeQuotes": "single",
//       "JSXExpressionsSingleLine": true,
//       "alignWithFirstAttribute": false,
//       "attrsOnSameLineAsTag": false,
//       "closingTagOnNewLine": false,
//       "firstAttributeOnSameLine": true,
//       "formatJSX": true,
//       "htmlOptions": {
//         "brace_style": "collapse-preserve-inline",
//         "indent_char": " ",
//         "indent_size": 4,
//         "max_preserve_newlines": 4,
//         "preserve_newlines": true,
//         "indent_with_tabs": false,
//         "end_with_newline": true,
//         "indent_level": 0,
//         "space_in_paren": true,
//         "space_in_empty_paren": true,
//         "jslint_happy": false,
//         "space_after_anon_function": true,
//         "break_chained_methods": false,
//         "keep_array_indentation": false,
//         "unescape_strings": true,
//         // "wrap_line_length": 120,
//         "e4x": false,
//         "comma_first": false,
//         "operator_position": "before-newline",
//         "space_before_conditional": true,
//         "eval_code": false,
//         "wrap-attributes": "none",
//         "preserve-newlines": false
//       },
//       "maxAttrsOnTag": 3,
//       "spaceInJSXExpressionContainers": ""
//     }
//   },
//   "options-JSON": {
//     "plugins": [
//       "esformatter-quotes"
//     ],
//     "quotes": {
//       "type": "double"
//     }
//   }
// }